import re
import subprocess
from pytools.persistent_dict import PersistentDict
storage = PersistentDict("mystorage")



#Parameters

#ONT reads path (.fq)
input_reads=""

#Flye path
flye_path=""

#Conda envs path (i.e "~/miniconda3/envs/")
conda_path=""

#Strainy path
strainy_path=""


#Clair model path (r1041_e82_400bps_sup_v420 is recomended)
clair_model_path=""




rule all:
    input: "output/qa_bins","output/coverage_list.lst","output/qa_transformed_bins" #bestbins



rule flye_build_assembly:
    input:input_reads
    output:"output/flye_output/assembly.fasta",dir=directory("output/flye_output")
    threads: 30
    shell:"python {flye_path} --nano-hq {input} --out-dir {output.dir} --threads 30 --meta --keep-haplotypes"



rule strainy_split_unitigs:
    input:"output/flye_output"
    output:"output/strainy_split/preprocessing_data/long_unitigs_split.bam", "output/strainy_split/preprocessing_data/long_unitigs_split.gfa","output/strainy_split/preprocessing_data/gfa_converted.fasta"
    conda:conda_path+"strainy"
    threads: 30
    shell:"python3 {strainy_path}  -g {input}/assembly_graph.gfa   -q {input_reads}  --unitig-split-length 50 -o output/strainy_split -b  none.bam -t 30 -m nano --only_split True"



rule binning:
    input: "output/strainy_split/preprocessing_data/gfa_converted.fasta"
    output: dir=directory("output/bins")
    threads: 30
    shell: "metabat2 -i {input} output/strainy_split/preprocessing_data/long_unitigs_split.bam -o {output.dir}/bin -t 30"



rule mag_qa:
	input: "output/bins"
	output: outdir=directory("output/qa_bins"),report="output/qa_bins/quality_report.tsv"
	threads: 30
	conda:	conda_path+"checkm2"
	shell: "checkm2 predict -x .fa  -i {input} -o {output.outdir} -t 30"



rule unitig_per_bin:
	input: "output/bins"
	output: "output/unitigs/bin.{bin}.lst"
	shell: "cat output/bins/bin.{wildcards.bin}.fa | grep '>' | cut -c 2- > {output}"



rule subset_bam:
	input: l="output/unitigs/{bin}.lst",	bam="output/strainy_split/preprocessing_data/long_unitigs_split.bam"
	output: "output/bams/{bin}.bam"
	conda: conda_path+"strainy"
	threads: 30
	shell: "python3 split_bam.py -bam {input.bam} -l {input.l} -o {output}"



rule index_bam:
	input:"output/bams/{bin}.bam"
	output: "output/bams/{bin}.bam.bai"
	conda: conda_path+"strainy"
	shell: "samtools index {input} "



rule make_split_fa:
	input: "output/strainy_split/preprocessing_data/long_unitigs_split.gfa"
	output: "output/gfa_splitted.fasta"
	conda: conda_path+"strainy"
	shell:"""
	awk '//^S{{print ">"$2"\\n"$3}}' {input} | fold > {output}
	"""



rule index_fa:
	input: "output/strainy_split/preprocessing_data/gfa_converted.fasta"
	output: "output/strainy_split/preprocessing_data/gfa_converted.fasta.fai"
	conda: conda_path+"strainy"
	shell:"samtools faidx {input}"



rule call_snp:
	input:b="output/bams/{bin}.bam",bai="output/bams/{bin}.bam.bai",fai="output/strainy_split/preprocessing_data/gfa_converted.fasta.fai",fa="output/strainy_split/preprocessing_data/gfa_converted.fasta"
	threads: 30
	output: "output/clair/{bin}/merge_output.vcf.gz"
	conda: conda_path+"clair3"
	shell: "run_clair3.sh --bam_fn={input.b} --ref_fn={input.fa} --output=output/clair/{wildcards.bin} --threads=30 --platform=ont --include_all_ctgs --model_path={clair_model_path} --chunk_size=50000  --snp_min_af=0.15 --no_phasing_for_fa"



rule  unzip_snp:
	input: "output/clair/{bin}/merge_output.vcf.gz"
	output: "output/clair/{bin}/snp.vcf"
	shell: "gunzip -c {input} > {output}"



rule subset_gfa:
	input: g="output/strainy_split/preprocessing_data/long_unitigs_split.gfa", l="output/unitigs/{bin}.lst"
	output: "output/gfa_sub/{bin}.gfa"
	conda: conda_path+"strainy"
	shell: "python3 split_gfa.py -g {input.g} -l {input.l} -outfile {output}"



rule  strainy:
	input: snp="output/clair/{bin}/snp.vcf", b="output/bams/{bin}.bam",bai="output/bams/{bin}.bam.bai", gfa="output/gfa_sub/{bin}.gfa" 
	output: "output/strainy_final/{bin}/strainy_final.gfa"
	conda: conda_path+"strainy"
	threads: 30
	shell: "python3 {strainy_path} -g {input.gfa} -q {input_reads} -o output/strainy_final/{wildcards.bin}  -b {input.b} -t 30 -m nano --snp {input.snp} --unitig-split-length 0" #Add af abd base quality



rule  bin_transform:
	input:"output/strainy_final/{bin}/strainy_final.gfa"
	output: "output/transformed_bins/{bin}.fa"
	shell:"""awk '/^S/{{print ">"$2"\\n"$3}}' output/strainy_final/{wildcards.bin}/strainy_final.gfa > {output}"""



rule run_filter_best:
    input: "output/qa_bins/quality_report.tsv"
    output: "best_res"
    run:
        from filter import get_best
        storage.store("myvar",get_best())
        shell("touch best_res")



rule count_MAG_coverage:
        input:  "best_res",   storage.fetch("myvar")   
        output: "output/coverage_list.lst"
        conda:conda_path+"strainy"
        shell:"python3 calc_cov.py > output/coverage_list.lst"



rule run_filter_cov:
    input: "output/coverage_list.lst"
    output: "cov_res"
    run:
        from filter import cov_filtered
        storage.store("myvar",cov_filtered("output/coverage_list.lst"))
        shell("touch cov_res")



rule mag_transformed_qa:
    input:  "cov_res",storage.fetch("myvar")
    output: directory("output/qa_transformed_bins")
    conda:
        conda_path+"checkm2"
    shell: "checkm2 predict -x .fa  -i output/transformed_bins -o {output} -t 30"
